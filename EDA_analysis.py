# -*- coding: utf-8 -*-
"""kaggleresponsesEDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mbEBWhXlTwf9Q9Hqr39N4_AwxkOK9XJ3
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd

df = pd.read_csv('kaggle_survey.csv')
df.head()

import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import plotly.express as px
pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)

df.shape

df.describe()

df_ques = df.iloc[1:,:]

df_ques.head()

df_ques.isnull().sum()/df.shape[0]

questions = {}

qnums =list(dict.fromkeys([i.split('_')[0] for i in df_ques.columns]))
qnums

for i in qnums:
  if i in ['Q1','Q2','Q3']:
    questions[i]=df_ques[i]
  else:
    questions[i]= df_ques[[q for q in df_ques.columns if q.startswith(i)]]

df_ques

df_ques.Q1

fig = px.histogram(df_ques, x='Q1', color_discrete_sequence=['red'])
fig.show()

fig = px.density_heatmap(df_ques, x='Q1', y='Q6', category_orders={'Q1':['18-21','22-24','25-29','30-34','35-39','40-44','45-49','50-54','55-59','60-69','70+'],'Q6':['I have never written code','< 1 years','1-2 years','3-5 years','5-10 years','10-20 years','20+ years']})
fig.show()

questions['Q7'].columns = list(questions['Q7'].mode().iloc[0,:])
q7 = questions['Q7'].count().reset_index()

q7

q7.columns = ['language','Count']
q7 = q7.sort_values('Count', ascending = False)

q7

fig = go.Figure([go.Bar(x = q7.language, y = q7.Count)])
fig.show()

Roles = {}
for i in df_ques.Q5.unique():
  Roles[i] = df_ques[df_ques.Q5==i]

Roles.keys()

Roles['Student']

Roles['Data Scientist']

#first subquestion --> How does education level vary by role

edu = df_ques.Q4.value_counts()
edu

#education across whole survey sample
fig = go.Figure([go.Bar(x=edu.index, y=edu.values)])
fig.show()

fig = go.Figure()
fig.add_trace(go.Bar(x= edu.index, y=edu.values))


buttons = []

#for each graph I want to show, I need a button for it

buttons.append(dict(method='restyle',
                    label='Data Scientist',
                    visible=True,
                    args=[{'y':[Roles['Data Scientist'].Q4.value_counts().values],
                           'x':[Roles['Data Scientist'].Q4.value_counts().index],
                           'type':'bar'}, [0]],
                    )
              )
buttons.append(dict(method='restyle',
                    label='Student',
                    visible=True,
                    args=[{'y':[Roles['Student'].Q4.value_counts().values],
                           'x':[Roles['Student'].Q4.value_counts().index],
                           'type':'bar'}, [0]],
                    )
              )
buttons.append(dict(method='restyle',
                    label='Data Analyst',
                    visible=True,
                    args=[{'y':[Roles['Data Analyst'].Q4.value_counts().values],
                           'x':[Roles['Data Analyst'].Q4.value_counts().index],
                           'type':'bar'}, [0]],
                    )
              )



updatemenu = []
your_menu = {}
updatemenu.append(your_menu)

updatemenu[0]['buttons'] = buttons
updatemenu[0]['direction'] = 'down'
updatemenu[0]['showactive'] = True


fig.update_layout(showlegend=False, updatemenus=updatemenu)
fig.show()

fig = go.Figure(layout=go.Layout(title= go.layout.Title(text="Comparing Education by Position")))

#changing to percent of group rather than raw numbers
fig.add_trace(go.Bar(name= 'Role Selection', x= edu.index, y=(edu.values/ edu.values.sum())))

#adding another trace for the second series of bars
fig.add_trace(go.Bar(name= 'All Data',x= edu.index, y=(edu.values/ edu.values.sum())))


buttons = []


for i in list(Roles.keys())[1:]:
    buttons.append(dict(method='restyle',
                        label= i,
                        visible=True,
                        args=[{'y':[Roles[i].Q4.value_counts().values/Roles[i].Q4.value_counts().values.sum()],
                               'x':[Roles[i].Q4.value_counts().index],
                               'type':'bar'}, [0]],
                        )
                  )



updatemenu = []
your_menu = {}
updatemenu.append(your_menu)

updatemenu[0]['buttons'] = buttons
updatemenu[0]['direction'] = 'down'
updatemenu[0]['showactive'] = True

# adding dropdown menus to the figure
fig.update_layout( updatemenus=updatemenu)


fig.update_xaxes(categoryorder= 'array', categoryarray= ["Doctoral degree",'Master’s degree','Bachelor’s degree','Some college/university study without earning a bachelor’s degree',"Professional degree","No formal education past high school","I prefer not to answer"])
fig.show()

fig = go.Figure(layout=go.Layout(title= go.layout.Title(text="Comparing Education by Position")))
fig.add_trace(go.Bar(name= 'Role Selection', x= edu.index, y=(edu.values/ edu.values.sum())))

buttons = []

for i in list(Roles.keys())[1:]:
    buttons.append(dict(method='restyle',
                        label= i,
                        visible=True,
                        args=[{'y':[Roles[i].Q4.value_counts().values/Roles[i].Q4.value_counts().values.sum()],
                               'x':[Roles[i].Q4.value_counts().index],
                               'type':'bar'}, [0]],
                        )
                  )

fig.add_trace(go.Bar(name= 'All Data',x= edu.index, y=(edu.values/ edu.values.sum())))

buttons2 = []

for i in list(Roles.keys())[1:]:
    buttons2.append(dict(method='restyle',
                        label= i,
                        visible=True,
                        args=[{'y':[Roles[i].Q4.value_counts().values/Roles[i].Q4.value_counts().values.sum()],
                               'x':[Roles[i].Q4.value_counts().index],
                               'type':'bar'}, [1]], # the [1] at the end lets us know they are for the first trace
                        )
                  )
# adjusting dropdown placement

button_layer_1_height = 1.23
updatemenus = list([
    dict(buttons=buttons,
            direction="down",
            pad={"r": 10, "t": 10},
            showactive=True,
            x=0.1,
            xanchor="left",
            y=button_layer_1_height,
            yanchor="top"),
    dict(buttons=buttons2,
            direction="down",
            pad={"r": 10, "t": 10},
            showactive=True,
            x=0.5,
            xanchor="left",
            y=button_layer_1_height,
            yanchor="top")])

fig.update_layout( updatemenus=updatemenus)
fig.update_xaxes(categoryorder= 'array', categoryarray= ["Doctoral degree",'Master’s degree','Bachelor’s degree','Some college/university study without earning a bachelor’s degree',"Professional degree","No formal education past high school","I prefer not to answer"])
fig.show()

questions['Q7']['Roles'] = df_ques.Q5

fig = go.Figure(layout=go.Layout(title= go.layout.Title(text="Comparing Coding Languages by Position")))
#changed from role selection to selection 1
fig.add_trace(go.Bar(name= 'Selection 1', x= q7.language, y=(q7.Count/ q7.Count.sum())))

def filter_bars(role, data):
    df = data[data['Roles'] == role]
    q7 = df.drop('Roles', axis= 1).count().reset_index()
    q7.columns = ['language','Count']
    return (q7.language, q7.Count/q7.Count.sum())

buttons = []

#added button for all data comparison
buttons.append(dict(method='restyle',
                        label= 'All Samples',
                        visible=True,
                        args=[{'y':[(q7.Count/ q7.Count.sum())],
                               'x':[q7.language],
                               'type':'bar'}, [0]], 
                        )
                  )

for i in list(Roles.keys())[1:]:
    buttons.append(dict(method='restyle',
                        label= i,
                        visible=True,
                        args=[{'y':[filter_bars(i,questions['Q7'])[1].values],
                               'x':[filter_bars(i,questions['Q7'])[0].values],
                               'type':'bar'}, [0]], 
                        )
                  )

fig.add_trace(go.Bar(name= 'Selection 2', x= q7.language, y=(q7.Count/ q7.Count.sum())))

buttons2 = []
#added button for all data comparison
buttons2.append(dict(method='restyle',
                        label= 'All Samples',
                        visible=True,
                        args=[{'y':[(q7.Count/ q7.Count.sum())],
                               'x':[q7.language],
                               'type':'bar'}, [1]],
                        )
                  )

for j in list(Roles.keys())[1:]:
    buttons2.append(dict(method='restyle',
                        label= j,
                        visible=True,
                        args=[{'y':[filter_bars(j,questions['Q7'])[1].values],
                               'x':[filter_bars(j,questions['Q7'])[0].values],
                               'type':'bar'}, [1]],
                        )
                  )
# adjusted dropdown placement

button_layer_1_height = 1.15
updatemenus = list([
    dict(buttons=buttons,
            direction="down",
            pad={"r": 10, "t": 10},
            showactive=True,
            x=0.1,
            xanchor="left",
            y=button_layer_1_height,
            yanchor="top"),
    dict(buttons=buttons2,
            direction="down",
            pad={"r": 10, "t": 10},
            showactive=True,
            x=0.50,
            xanchor="left",
            y=button_layer_1_height,
            yanchor="top")])

fig.update_layout( updatemenus=updatemenus)
#added annotations next to dropdowns
fig.update_layout(
    annotations=[
        dict(text="Selection 1", x=0, xref="paper", y=1.1, yref="paper",
                             align="left", showarrow=False),
        dict(text="Selection 2", x=0.45, xref="paper", y=1.1,
                             yref="paper", showarrow=False)
    ])
fig.update_xaxes(categoryorder= 'array', categoryarray= q7.language)
fig.show()




questions['Q9'].columns = list(questions['Q9'].mode().iloc[0,:])
q9 = questions['Q9'].count().reset_index()
q9.columns = ['language','Count']
q9 = q9.sort_values('Count', ascending = False)

questions['Q9']['Roles'] = df_ques.Q5

fig = go.Figure(layout=go.Layout(title= go.layout.Title(text="Comparing IDE's by Position")))
#changed from role selection to selection 1
fig.add_trace(go.Bar(name= 'Selection 1', x= q9.language, y=(q9.Count/ q9.Count.sum())))

buttons = []

#added button for all data comparison
buttons.append(dict(method='restyle',
                        label= 'All Samples',
                        visible=True,
                        args=[{'y':[(q9.Count/ q9.Count.sum())],
                               'x':[q9.language],
                               'type':'bar'}, [0]], 
                        )
                  )

for i in list(Roles.keys())[1:]:
    buttons.append(dict(method='restyle',
                        label= i,
                        visible=True,
                        args=[{'y':[filter_bars(i,questions['Q9'])[1].values],
                               'x':[filter_bars(i,questions['Q9'])[0].values],
                               'type':'bar'}, [0]], 
                        )
                  )

fig.add_trace(go.Bar(name= 'Selection 2', x= q9.language, y=(q9.Count/ q9.Count.sum())))

buttons2 = []
#added button for all data comparison
buttons2.append(dict(method='restyle',
                        label= 'All Samples',
                        visible=True,
                        args=[{'y':[(q9.Count/ q9.Count.sum())],
                               'x':[q9.language],
                               'type':'bar'}, [1]], 
                        )
                  )

for j in list(Roles.keys())[1:]:
    buttons2.append(dict(method='restyle',
                        label= j,
                        visible=True,
                        args=[{'y':[filter_bars(j,questions['Q9'])[1].values],
                               'x':[filter_bars(j,questions['Q9'])[0].values],
                               'type':'bar'}, [1]], 
                        )
                  )
# adjusted dropdown placement


button_layer_1_height = 1.15
updatemenus = list([
    dict(buttons=buttons,
            direction="down",
            pad={"r": 10, "t": 10},
            showactive=True,
            x=0.1,
            xanchor="left",
            y=button_layer_1_height,
            yanchor="top"),
    dict(buttons=buttons2,
            direction="down",
            pad={"r": 10, "t": 10},
            showactive=True,
            x=0.50,
            xanchor="left",
            y=button_layer_1_height,
            yanchor="top")])

fig.update_layout( updatemenus=updatemenus)
#added annotations next to dropdowns
fig.update_layout(
    annotations=[
        dict(text="Selection 1", x=0, xref="paper", y=1.1, yref="paper",
                             align="left", showarrow=False),
        dict(text="Selection 2", x=0.45, xref="paper", y=1.1,
                             yref="paper", showarrow=False)
    ])
fig.update_xaxes(categoryorder= 'array', categoryarray= q9.language)
fig.show()

# Design Function


def filter_bars(role, data):
    df = data[data['Roles'] == role]
    q = df.drop('Roles', axis= 1).count().reset_index()
    q.columns = ['language','Count']
    return (q.language, q.Count/q.Count.sum())

def build_graph(q_number, Roles, Title):
    """Create dropdown visual with question data"""
    if isinstance(q_number, pd.DataFrame):
        qnumber = q_number.copy()
        qnumber.columns = list(qnumber.mode().iloc[0,:])
        qcnt = qnumber.count().reset_index()
        qcnt.columns = ['feature','cnt']
        qcnt = qcnt.sort_values('cnt', ascending = False)
        qnumber['Roles'] = df_ques.Q5


        fig = go.Figure(layout=go.Layout(title= go.layout.Title(text=Title)))
        #changed from role selection to selection 1
        fig.add_trace(go.Bar(name= 'Selection 1', x= qcnt.feature, y=(qcnt.cnt/ qcnt.cnt.sum())))

        buttons = []

        #added button for all data comparison
        buttons.append(dict(method='restyle',
                                label= 'All Samples',
                                visible=True,
                                args=[{'y':[(qcnt.cnt/ qcnt.cnt.sum())],
                                       'x':[qcnt.feature],
                                       'type':'bar'}, [0]],
                                )
                          )

        for i in list(Roles.keys())[1:]:
            buttons.append(dict(method='restyle',
                                label= i,
                                visible=True,
                                args=[{'y':[filter_bars(i,qnumber)[1].values],
                                       'x':[filter_bars(i,qnumber)[0].values],
                                       'type':'bar'}, [0]],
                                )
                          )

        fig.add_trace(go.Bar(name= 'Selection 2', x= qcnt.feature, y=(qcnt.cnt/ qcnt.cnt.sum())))

        buttons2 = []
        #added button for all data comparison
        buttons2.append(dict(method='restyle',
                                label= 'All Samples',
                                visible=True,
                                args=[{'y':[(qcnt.cnt/ qcnt.cnt.sum())],
                                       'x':[qcnt.feature],
                                       'type':'bar'}, [1]],
                                )
                          )

        for i in list(Roles.keys())[1:]:
            buttons2.append(dict(method='restyle',
                                label= i,
                                visible=True,
                                args=[{'y':[filter_bars(i,qnumber)[1].values],
                                       'x':[filter_bars(i,qnumber)[0].values],
                                       'type':'bar'}, [1]],
                                )
                          )


        button_layer_1_height = 1.15
        updatemenus = list([
            dict(buttons=buttons,
                    direction="down",
                    pad={"r": 10, "t": 10},
                    showactive=True,
                    x=0.1,
                    xanchor="left",
                    y=button_layer_1_height,
                    yanchor="top"),
            dict(buttons=buttons2,
                    direction="down",
                    pad={"r": 10, "t": 10},
                    showactive=True,
                    x=0.50,
                    xanchor="left",
                    y=button_layer_1_height,
                    yanchor="top")])

        fig.update_layout( updatemenus=updatemenus)
        
        fig.update_layout(
            annotations=[
                dict(text="Selection 1", x=0, xref="paper", y=1.1, yref="paper",
                                     align="left", showarrow=False),
                dict(text="Selection 2", x=0.45, xref="paper", y=1.1,
                                     yref="paper", showarrow=False)
            ])
        fig.update_xaxes(categoryorder= 'array', categoryarray= qcnt.feature)
        fig.show()


    else:
        qnumber= q_number.copy()
        vcnts = qnumber.value_counts()
        qnumber = pd.concat([qnumber,df_ques.Q5], axis =1)
        qnumber.columns = ['feature','Roles']

        fig = go.Figure(layout=go.Layout(title= go.layout.Title(text=Title)))
        
        fig.add_trace(go.Bar(name= 'Selection 1', x= vcnts.index, y=(vcnts.values/ vcnts.values.sum())))

        buttons = []

        
        buttons.append(dict(method='restyle',
                                label= 'All Samples',
                                visible=True,
                                args=[{'y':[vcnts.values/ vcnts.values.sum()],
                                       'x':[vcnts.index],
                                       'type':'bar'}, [0]],
                                )
                          )

        for i in list(Roles.keys())[1:]:
            qrole = qnumber[qnumber['Roles']==i].feature.value_counts()
            buttons.append(dict(method='restyle',
                                label= i,
                                visible=True,
                                args=[{'y':[qrole.values/qrole.values.sum()],
                                       'x':[qrole.index],
                                       'type':'bar'}, [0]],
                                )
                          )

        fig.add_trace(go.Bar(name= 'Selection 2',x= vcnts.index, y=(vcnts.values/ vcnts.values.sum())))

        buttons2 = []
                #added button for all data comparison
        buttons2.append(dict(method='restyle',
                                label= 'All Samples',
                                visible=True,
                                args=[{'y':[(vcnts.values/ vcnts.values.sum())],
                                       'x':[vcnts.index],
                                       'type':'bar'}, [1]],
                                )
                          )

        for i in list(Roles.keys())[1:]:
            qrole = qnumber[qnumber['Roles']==i].feature.value_counts()
            buttons2.append(dict(method='restyle',
                                label= i,
                                visible=True,
                                args=[{'y':[qrole.values/qrole.values.sum()],
                                       'x':[qrole.index],
                                       'type':'bar'}, [1]],
                                )
                          )
        # adjusted dropdown placement

        button_layer_1_height = 1.15
        updatemenus = list([
            dict(buttons=buttons,
                    direction="down",
                    pad={"r": 10, "t": 10},
                    showactive=True,
                    x=0.1,
                    xanchor="left",
                    y=button_layer_1_height,
                    yanchor="top"),
            dict(buttons=buttons2,
                    direction="down",
                    pad={"r": 10, "t": 10},
                    showactive=True,
                    x=0.50,
                    xanchor="left",
                    y=button_layer_1_height,
                    yanchor="top")])

        fig.update_layout( updatemenus=updatemenus)
        #added annotations next to dropdowns
        fig.update_layout(
            annotations=[
                dict(text="Selection 1", x=0, xref="paper", y=1.1, yref="paper",
                                     align="left", showarrow=False),
                dict(text="Selection 2", x=0.45, xref="paper", y=1.1,
                                     yref="paper", showarrow=False)
            ])
        fig.update_xaxes(categoryorder= 'array', categoryarray= vcnts.index)
        fig.show()

    return

build_graph(questions['Q1'],Roles,'Age by Position')

build_graph(questions['Q12'],Roles,'Hardware by position')



"""# **Attempting to quantify the Gender Difference within the data **"""

Genders = {}
for i in df_ques.Q2.unique():
    Genders[i] = df_ques[df_ques.Q2 == i]

df_ques.Q2.value_counts()/ df_ques.Q2.value_counts().sum()

df_mf = df_ques[df_ques.Q2.isin(['Man','Woman'])]

df_mf.Q2.value_counts()/ df_mf.Q2.value_counts().sum()

fig= px.histogram(df_mf,x='Q4',color ='Q2')
fig.show()

fig= px.histogram(df_mf,x='Q4',color ='Q2', histnorm='probability density')
fig.show()

#Percent more or less than distribution of the average population of women (Absolute)
male_degrees = df_mf[df_mf.Q2 == 'Man'].Q4.value_counts()
female_degrees = df_mf[df_mf.Q2 == 'Woman'].Q4.value_counts()
total_degrees = df_mf.Q4.value_counts()
more_women = (female_degrees/total_degrees)-.197 #greater proportion of women than sample
more_women['Color'] = np.where(more_women.values <0, 'blue','red')
fig = go.Figure(go.Bar(x=(female_degrees/total_degrees).index, y= (female_degrees/total_degrees).values-.197, marker_color=more_women.Color))
fig.update_layout(title= "Level of Female Education Relative to AVG of Sample (19.7%)")
fig.show()

#Female Distribution by Country
fig= px.histogram(df_mf,x='Q3',color ='Q2')
fig.update_xaxes(categoryorder= "total descending")
fig.show()

def create_norm_graph(qnum, data, title, baseline):
    male = data[data.Q2 == 'Man'][qnum].value_counts()
    female = data[data.Q2 == 'Woman'][qnum].value_counts()
    total = data[qnum].value_counts()
    more_women = (female/total)-baseline #greater proportion of women than sample
    more_women['Color'] = np.where(more_women.values <0, 'blue','red')
    fig = go.Figure(go.Bar(x=(female/total).index, y= (female/total).values-baseline, marker_color=more_women.Color))
    fig.update_layout(title= title)
    fig.update_layout(xaxis={'categoryorder':'total descending'})
    fig.show()
    return

# which countries have the most relative female representitives in the survey?
create_norm_graph('Q3',df_mf,"Amount of Women By Country Relative to AVG of Sample (19.7%)",.197)

#by income level
create_norm_graph('Q24',df_workers_mf,"Amount of Women By Income Level Relative to AVG of Sample (17.4%)",.174)
df_workers_mf.Q24.value_counts()

#graph for just data scientists
df_mf_ds= df_mf[df_mf['Q5'] =='Data Scientist']
create_norm_graph('Q24',df_mf_ds,"Amount of Women By Country Relative to AVG of Sample (17.4%)", .174)

df_mf_ds.Q24.value_counts()



"""## Building a Model
I thought it made more sense to use a regression here to try to predict salary.
"""

#replace '$',',','>' in data
df_model = df_ques.dropna(subset=['Q24'])
df_model['salary_cleaned'] = df_model.Q24.apply(lambda x: str(x).replace('$','').replace(',','').replace('>','').strip())
df_model.salary_cleaned.value_counts()

df_model['salary_min'] = df_model.salary_cleaned.apply(lambda x: 500000 if '-' not in x else int(x.split('-')[0]))
df_model['salary_max'] = df_model.salary_cleaned.apply(lambda x: 500000 if '-' not in x else int(x.split('-')[1]))

df_model.salary_max.value_counts()

#Convert to rough continuous variable
df_model['aprox_salary'] = (df_model.salary_min+df_model.salary_max)/2
df_model.aprox_salary.value_counts()

import statsmodels.api as sm
df_model_fin = df_model[df_model.Q2.isin(['Man','Woman'])]
#filter for workers
df_model_fin = df_model_fin[~df_model_fin['Q5'].isin(['Student','Currently not employed'])]
df_model_fin.drop('Time from Start to Finish (seconds)', axis =1, inplace = True)

df_model_fin.isnull().any()

# Separate target and features
Y = df_model_fin['aprox_salary']

# Identify ALL categorical columns (exclude numeric and target)
categorical_cols = [col for col in df_model_fin.columns
                    if df_model_fin[col].dtype == 'object' and col != 'aprox_salary']

# Create dummy variables for ALL categorical columns
dummies = pd.get_dummies(df_model_fin[categorical_cols], drop_first=True)

# Combine with numeric features (ensure Q5 is numeric)
# If Q5 is categorical, include it in categorical_cols above
X = pd.concat([df_model_fin.select_dtypes(include=['int64', 'float64']), dummies], axis=1)

# Add constant term
X = sm.add_constant(X)

X = X.apply(pd.to_numeric, errors='coerce')
X.fillna(0, inplace=True)  # Replace NaNs with 0 (if any)

print("Y dtype:", Y.dtype)
print("X dtypes:\n", X.dtypes)
print("Non-numeric in X:\n", X.select_dtypes(exclude=[np.number]).columns)

# converting any bool column to ints (0/1), leave the rest alone
X = X.apply(lambda col: col.astype(int) if col.dtype == 'bool' else col)

X = X.astype(float)

import statsmodels.api as sm

X = sm.add_constant(X, has_constant='add')

model  = sm.OLS(Y, X)
results = model.fit()
print(results.summary())

# creating function to add additional questions to dataframe for easier processing
def qnums(question_list, dataframe):
    q_out = []
    for i in question_list:
        for j in dataframe.columns:
            if i == j.split('_')[0]:
                q_out.append(j)
    return dataframe.loc[:,q_out]


q245 =  qnums(['Q2','Q4','Q5'], model_dummies)
q245

def qnums(question_list, dataframe):
    q_out = []
    for i in question_list:
        for j in dataframe.columns:
            if i == j.split('_')[0]:
                q_out.append(j)
    return dataframe.loc[:, q_out]

q245 = qnums(['Q2','Q4','Q5'], model_dummies)


X = q245.drop('Q2_Man', axis=1)


X = X.astype(float)


import statsmodels.api as sm
X = sm.add_constant(X, has_constant='add')


model   = sm.OLS(Y, X)
results = model.fit()
print(results.summary())

